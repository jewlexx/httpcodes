import {
    ClientError,
    Informational,
    Redirection,
    ServerError,
    Successful,
} from "./consts.ts";

export enum Httpcode {
    // 1xx Informational
    Continue = Informational.CONTINUE,
    SwitchingProtocols = Informational.SWITCHING_PROTOCOLS,
    Processing = Informational.PROCESSING,
    EarlyHints = Informational.EARLY_HINTS,

    // 2xx Success
    Ok = Successful.OK,
    Created = Successful.CREATED,
    Accepted = Successful.ACCEPTED,
    NonAuthoritativeInformation = Successful.NON_AUTHORITATIVE_INFORMATION,
    NoContent = Successful.NO_CONTENT,
    ResetContent = Successful.RESET_CONTENT,
    PartialContent = Successful.PARTIAL_CONTENT,
    MultiStatus = Successful.MULTI_STATUS,
    AlreadyReported = Successful.ALREADY_REPORTED,
    ImUsed = Successful.IM_USED,

    // 3xx Redirection
    MultipleChoices = Redirection.MULTIPLE_CHOICES,
    MovedPermanently = Redirection.MOVED_PERMANENTLY,
    Found = Redirection.FOUND,
    SeeOther = Redirection.SEE_OTHER,
    NotModified = Redirection.NOT_MODIFIED,
    UseProxy = Redirection.USE_PROXY,
    TemporaryRedirect = Redirection.TEMPORARY_REDIRECT,
    PermanentRedirect = Redirection.PERMANENT_REDIRECT,

    // 4xx Client Error
    BadRequest = ClientError.BAD_REQUEST,
    Unauthorized = ClientError.UNAUTHORIZED,
    PaymentRequired = ClientError.PAYMENT_REQUIRED,
    Forbidden = ClientError.FORBIDDEN,
    NotFound = ClientError.NOT_FOUND,
    MethodNotAllowed = ClientError.METHOD_NOT_ALLOWED,
    NotAcceptable = ClientError.NOT_ACCEPTABLE,
    ProxyAuthenticationRequired = ClientError.PROXY_AUTHENTICATION_REQUIRED,
    RequestTimeout = ClientError.REQUEST_TIMEOUT,
    Conflict = ClientError.CONFLICT,
    Gone = ClientError.GONE,
    LengthRequired = ClientError.LENGTH_REQUIRED,
    PreconditionFailed = ClientError.PRECONDITION_FAILED,
    PayloadTooLarge = ClientError.PAYLOAD_TOO_LARGE,
    UriTooLong = ClientError.URI_TOO_LONG,
    UnsupportedMediaType = ClientError.UNSUPPORTED_MEDIA_TYPE,
    RangeNotSatisfiable = ClientError.RANGE_NOT_SATISFIABLE,
    ExpectationFailed = ClientError.EXPECTATION_FAILED,
    ImATeapot = ClientError.IM_A_TEAPOT,
    MisdirectedRequest = ClientError.MISDIRECTED_REQUEST,
    UnprocessableEntity = ClientError.UNPROCESSABLE_ENTITY,
    Locked = ClientError.LOCKED,
    FailedDependency = ClientError.FAILED_DEPENDENCY,
    TooEarly = ClientError.TOO_EARLY,
    UpgradeRequired = ClientError.UPGRADE_REQUIRED,
    PreconditionRequired = ClientError.PRECONDITION_REQUIRED,
    TooManyRequests = ClientError.TOO_MANY_REQUESTS,
    RequestHeaderFieldsTooLarge = ClientError.REQUEST_HEADER_FIELDS_TOO_LARGE,
    UnavailableForLegalReasons = ClientError.UNAVAILABLE_FOR_LEGAL_REASONS,

    // 5xx Server Error
    InternalServerError = ServerError.INTERNAL_SERVER_ERROR,
    NotImplemented = ServerError.NOT_IMPLEMENTED,
    BadGateway = ServerError.BAD_GATEWAY,
    ServiceUnavailable = ServerError.SERVICE_UNAVAILABLE,
    GatewayTimeout = ServerError.GATEWAY_TIMEOUT,
    HttpVersionNotSupported = ServerError.HTTP_VERSION_NOT_SUPPORTED,
    VariantAlsoNegotiates = ServerError.VARIANT_ALSO_NEGOTIATES,
    InsufficientStorage = ServerError.INSUFFICIENT_STORAGE,
    LoopDetected = ServerError.LOOP_DETECTED,
    NotExtended = ServerError.NOT_EXTENDED,
    NetworkAuthenticationRequired = ServerError.NETWORK_AUTHENTICATION_REQUIRED,
}
